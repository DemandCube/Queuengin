apply plugin: 'java'
apply plugin: 'eclipse' 
apply plugin: 'maven' 

archivesBaseName = 'queuengin'

task wrapper(type: Wrapper) {
    gradleVersion = '2.0'
}

eclipse {
  classpath {
    downloadSources=true
  }
}

eclipse.classpath.defaultOutputDir = file( 'build/classes' )

group = 'com.neverwinterdp'
sourceCompatibility = 1.7
version = '1.0-SNAPSHOT'
configurations.compile.transitive = true

project.ext {
  kafkaVersion = "0.8.1.1"
  zookeeperVersion = "3.4.6"
}

repositories {
  mavenLocal()
  mavenCentral()
}


dependencies {
  compile group: 'com.neverwinterdp', name: 'commons.utils', version: '1.0-SNAPSHOT'
  compile group: 'com.neverwinterdp', name: 'commons.api', version: '1.0-SNAPSHOT'
  compile group: 'com.neverwinterdp', name: 'commons.cluster', version: '1.0-SNAPSHOT'
  compile group: 'com.neverwinterdp', name: 'commons.zookeeper', version: '1.0-SNAPSHOT'

  compile group: 'org.apache.kafka', name: 'kafka_2.10', version: project.kafkaVersion

  compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.5'
  compile group: 'org.slf4j', name: 'slf4j-log4j12', version: '1.7.5'
  testCompile group: 'junit', name: 'junit', version: '4.11'
}

test {
  forkEvery = 1
  ignoreFailures = true
  testLogging.showStandardStreams = true

  filter {
    includeTestsMatching "*UnitTest"
  }
}

task testJar(type: Jar) {
  classifier = 'tests'
  from sourceSets.test.output
}

configurations { 
  tests 
  published.extendsFrom tests, archives 
} 


install { 
  configuration = configurations.published 
} 

artifacts { 
  tests testJar 
} 

task release (dependsOn: 'build') << {
  def releaseDir = "${buildDir}/release/queuengin"
  doRelease(releaseDir)
}

def doRelease(String releaseDir) {
  println "\n\n"
  println "*************************************************"
  println "Preparing the release directory ${releaseDir}"
  println "*************************************************"

  println "Copying kafka_2.8.0-0.8.1.1 to the release directory"
  copy {
    from "${buildDir}/../../../../NeverwinterDP-dependencies/kafka_2.8.0-0.8.1.1"
    into "${releaseDir}"
  }

  println "Patch kafka_2.8.0-0.8.1.1 with the custom script"
  copy {
    from "src/app"
    into "${releaseDir}"
  }

  def jars = [ 
    "commons.utils", "commons.api", "commons.cluster", 'commons.zookeeper',
    "jackson-core-2.2.2", "jackson-databind", "jackson-annotations", "jcommander", "reflections", "guava", "javassist",
    'guice', 'javax.inject', 'hazelcast', 'aopalliance',
    "kafka", "scala-library",
    'zookeeper', 'zkclient',
    "metrics-core", "metrics-json", "metrics-annotation",
    "log4j", "slf4j-api", "slf4j-log4j12"
  ] 

  println "Patch kafka_2.8.0-0.8.1.1 with the additional library"
  configurations.compile.each { File file -> 
    if(isIn(jars, file)) {
      println "  Copy $file.name to queuengin/libs"
      copy {
        from file
        into "${releaseDir}/libs"
      }
    }
  }
  println "Patch kafka_2.8.0-0.8.1.1 with the queuengin library"
  copy {
    from "${buildDir}/libs"
    into "${releaseDir}/libs"
  }
}

def isIn(set, File file) {
  for(item in set) {
    if(file.name.startsWith(item)) return true ;
  }
  return false ;
}
